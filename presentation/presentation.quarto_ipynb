{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Поиск жёсткого преобразования облака точек\"\n",
        "author:\n",
        "  - name: Ivan Ryzhikov\n",
        "    email: iwanryzij@yandex.ru\n",
        "  - name: Mark Ilyasov\n",
        "format: \n",
        "  revealjs:\n",
        "    transition: slide\n",
        "    chalkboard: true\n",
        "editor: visual\n",
        "execute:\n",
        "  echo: false\n",
        "jupyter: python3\n",
        "---\n",
        "\n",
        "\n",
        "## Постановка задачи\n",
        "\n",
        "Даны два облака точек. Найти жёсткое преобразование из одного в другое\n",
        "\n",
        "-   Соответвие между начальными и конечными точками не известно\n",
        "\n",
        "-   Данные имеют шум\n",
        "\n",
        "::: callout-note\n",
        "Жёсткое преобразование сохраняет расстояние между точками, т.е. поворот + параллельный перенос\n",
        ":::\n",
        "\n",
        "## Более формально {.smaller}\n",
        "\n",
        "Дано: $X = \\{ \\mathbf{x}_1, \\mathbf{x}_2, \\dots, \\mathbf{x}_N \\} \\subset \\mathbb{R}^n$, $Y = \\{ \\mathbf{y}_1, \\mathbf{y}_2, \\dots, \\mathbf{y}_N \\} \\subset \\mathbb{R}^n$\n",
        "\n",
        "$$\n",
        "\\mathbf{y}_{\\pi(i)} = R \\mathbf{x}_i + t + \\boldsymbol{\\epsilon}_i, \\quad \\forall i = 1, \\dots, N,\n",
        "$$\n",
        "\n",
        "где\n",
        "\n",
        "-   $\\boldsymbol{\\epsilon}_i \\in \\mathbb{R}^n$ — вектор шума для точки $i$, $\\boldsymbol{\\epsilon}_i \\sim \\mathcal{N}(0,\\, (\\sigma^2, \\sigma^2,\\sigma^2))$\n",
        "\n",
        "-   $R \\in SO(3)$ — матрица вращения $R^T R = I$, $\\det(R) = 1$\n",
        "\n",
        "-   $t \\in \\mathbb{R}^n$ — вектор смещения,\n",
        "\n",
        "-   $\\pi: \\{1, \\dots, N\\} \\to \\{1, \\dots, N\\}$ — перестановка индексов.\n",
        "\n",
        "$$\n",
        "\\underset{R \\in SO(3),\\,t,\\,\\pi}{\\arg \\min}\\ \\sum_{i=1}^N \\| R \\mathbf{x}_i + t - \\mathbf{y}_{\\pi(i)} + \\boldsymbol{\\epsilon}_i \\|^2,\n",
        "$$\n",
        "\n",
        "## В терминах матриц {.smaller auto-animate=\"true\"}\n",
        "\n",
        "$$\n",
        "Y^T = R X^T P + t \\begin{pmatrix} 1 & \\dots & 1 \\end{pmatrix}_{1 \\times N} + E,\n",
        "$$\n",
        "\n",
        "-   $\\|\\cdot\\|_F$ — фробениусова норма,\n",
        "-   $R \\in SO(3)$ — матрица вращения ($R^T R = I$, $\\det(R) = 1$),\n",
        "-   $P$ — матрица перестановки\n",
        "    -   $P_{ij} \\in \\{0, 1\\}$;\n",
        "    -   каждая строка и столбец имеют одну единицу — $\\forall i \\sum_{j=1}^N P_{ij} = 1$, $\\forall j \\sum_{i=1}^N P_{ij} = 1$\n",
        "-   $E \\in \\mathbb{R}^{n \\times N}$ — матрица шума с $E[:, i] = \\boldsymbol{\\epsilon}_i$.\n",
        "\n",
        "::: {data-id=\"box1\"}\n",
        "$$\n",
        "\\underset{R \\in SO(3),\\,t,\\,P}{\\arg \\min}\\ \\| R X^T P + t \\begin{pmatrix} 1 & \\dots & 1 \\end{pmatrix}_{1 \\times N} - Y^T \\|_F^2\n",
        "$$\n",
        ":::\n",
        "\n",
        "## Проблема {auto-animate=\"true\"}\n",
        "\n",
        "::: {data-id=\"box1\"}\n",
        "$$\n",
        "\\underset{R \\in SO(3),\\,t,\\,P}{\\arg \\min}\\ \\| R X^TP + t \\begin{pmatrix} 1 & . . . & 1 \\end{pmatrix}_{1 \\times N} - Y^T \\|_F^2\n",
        "$$\n",
        ":::\n",
        "\n",
        "Ключевая сложность — поиск матрицы соответствия.\n",
        "\n",
        "Целевая функция приобретает дискретную форму — обычные методы оптимизации не применимы\n",
        "\n",
        "::: fragment\n",
        "Алгоритм Кабша(-Умеямы) умеет решать успрощенную задачу с известным соответствием\n",
        "\n",
        "$$\n",
        "\\underset{R \\in SO(3),\\,t}{\\arg \\min}\\ \\| R X^T + t \\begin{pmatrix} 1 & \\dots & 1 \\end{pmatrix}_{1 \\times N} - Y^T \\|_F^2\n",
        "$$\n",
        ":::\n",
        "\n",
        "## Решение\n",
        "\n",
        "Избавимся от матрицы перестановок — будем уменьшать расстояние между облаками.\n",
        "\n",
        "::: fragment\n",
        "Изменим целевую функцию\n",
        "\n",
        "$$\n",
        "\\underset{{R \\in SO(3),\\ t}}{\\arg \\min}\\ \\sum_{i=1}^N \\| R \\mathbf{x}_i + t - \\mathbf{y}_{\\sigma(i)} \\|^2\n",
        "$$\n",
        "\n",
        "-   $\\sigma(i)$ — индекс ближайшей точки $\\mathbf{y}_{\\sigma(i)} \\in Y$ для $\\mathbf{x}_i \\in X$ [^1]\n",
        ":::\n",
        "\n",
        "[^1]: отображение не биективно, индексы могут совпадать для разных точек\n",
        "\n",
        "## Идея алгоритма ICP\n",
        "\n",
        "**Iteartive Closest Point** — итеративный метод поиска жёсткого преобразования через сопоставление ближайших точек. В качестве приближенного соответсвия точек используется сопоставление каждой ближайшей к ней (из другого облака). Для полученного соответствия можно использовать алгоритм Кабша\n",
        "\n",
        "## Этапы алгоритма ICP\n",
        "\n",
        "1.  Инициализация начального преобразования\n",
        "2.  Итерация цикла\n",
        "    1.  Применение текущего преобразования\n",
        "    2.  Построение соответствия между точками через поиск ближайшей\n",
        "    3.  Обновление приближения через алгоритм Кабша для найденного соответсвия\n",
        "    4.  Проверка сходимости алгоритма через метрику\n",
        "\n",
        "## Сходимость ICP\n",
        "\n",
        "Каждую итерацию выбирается соответствие между ближайшими точками в облаках. Алгоритм Кабша уменьшает расстояние между этими точками. Целевая функция монотонно убывает (невозрастает).\n",
        "Таким образом, ICP приобретает локальную сходимость.\n",
        "\n",
        "::: {.callout-tip}\n",
        "## Применимость алгоритма к задаче\n",
        "Минимум исходной метрики является минимумом так же и для целевой функции ICP\n",
        ":::\n",
        "\n",
        "## Подготовка к исследованию методов {.center}\n"
      ],
      "id": "5c57d1fe"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from functools import partial\n",
        "\n",
        "import plotly\n",
        "plotly.io.renderers.default = 'notebook'\n",
        "\n",
        "import numpy as np\n",
        "from predict_transformation import cloud_generator\n",
        "from predict_transformation import utils\n",
        "from predict_transformation.registrars import ICP_registrar, RANSAC_registrar\n",
        "from predict_transformation import view_data"
      ],
      "id": "da4703bb",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Генерация примеров (1/2){.smaller}\n",
        "\n",
        "::::: columns\n",
        "::: {.column width=\"40%\"}\n",
        "#### Сферическое облако{.center}\n",
        "Точки $\\mathbf{p}$ на сфере — результат нормирования случайного вектора $\\mathbf{v}$ с нормально-распределенными компонентами $x$, $y$ и $z$, с последующим домножением на радиус $r$\n",
        "$$\n",
        "\\mathbf{p} = r \\cdot \\frac{\\mathbf{v}}{\\|\\mathbf{v}\\|}\n",
        "$$\n",
        "$$\n",
        "\\quad \\mathbf{v} = (x, y, z) \\sim \\mathcal{N}(0, \\sigma^2)\n",
        "$$\n",
        ":::\n",
        "\n",
        "::: {.column width=\"60%\"}"
      ],
      "id": "9b28cbdb"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "np.random.seed(222)\n",
        "sphere_radius = 100\n",
        "sphere_center = np.zeros(3)\n",
        "point_generator = partial(\n",
        "  utils.generate_uniform_point_on_sphere,\n",
        "  sphere_radius,\n",
        "  sphere_center,\n",
        ")\n",
        "n = 4000\n",
        "sphere = np.vstack([point_generator() for _ in range(n)])\n",
        "view_data.plot_comparison(sphere)"
      ],
      "id": "9313ec84",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        ":::::\n",
        "\n",
        "## Генерация примеров (2/2)\n",
        "\n",
        "::::: columns\n",
        "::: {.column width=\"40%\"}\n",
        "#### Деформация сферы{.center}\n",
        "Выраженно через воздействие вектора с силой обратно пропорциональной расстоянию до точки приложения\n",
        ":::\n",
        "\n",
        "::: {.column width=\"60%\"}"
      ],
      "id": "1a74cd21"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "np.random.seed(222)\n",
        "potato = cloud_generator.generate_cloud_matrix(10000, 40)\n",
        "view_data.plot_comparison(potato)"
      ],
      "id": "173cb4fd",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        ":::::\n",
        "\n",
        "## Исследование эффективности от угла\n",
        "\n",
        "::: fragment\n",
        "\n",
        "#### Генерирация целового облака\n",
        "\n",
        "- Поворот на заданное число вдоль плоскости XY\n",
        "- Наложение шума\n",
        "\n",
        ":::\n",
        "\n",
        "::: fragment\n",
        "\n",
        "#### Метрики эффективности\n",
        "\n",
        "- RMSE (среднеквадратическое расстояние от точек одного облака до другого облака)\n",
        "- Нормы Фробениуса от разности между найденной трансформацией и искомой\n",
        "\n",
        ":::\n",
        "\n",
        "## Исследование метода ICP\n",
        "### На всем дипазоне углов"
      ],
      "id": "95f7ecef"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "def icp(source_pcd, target_pcd):\n",
        "  registrar = ICP_registrar(source_pcd, target_pcd, threshold=100)\n",
        "  registrar.register()\n",
        "  return registrar.get_registration_result()\n",
        "\n",
        "\n",
        "np.random.seed(111)\n",
        "NOISE_SCALE = 0.01\n",
        "VOXEL_SIZE = NOISE_SCALE * 3\n",
        "\n",
        "X = cloud_generator.generate_cloud_matrix(10000, 40)\n",
        "Y = utils.add_noise(X, NOISE_SCALE)\n",
        "Y = utils.random_permutation(Y)\n",
        "\n",
        "df = utils.estimate_metrics(Y, 40, icp, -180, 180)\n",
        "view_data.show_estimation_method_plot(df, title=\"ICP\")"
      ],
      "id": "11c27c14",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Исследование метода ICP\n",
        "### Для углов от -45 до 45 градусов"
      ],
      "id": "77d502d0"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "np.random.seed(111)\n",
        "NOISE_SCALE = 0.01\n",
        "\n",
        "X = cloud_generator.generate_cloud_matrix(10000, 40)\n",
        "Y = utils.add_noise(X, NOISE_SCALE)\n",
        "Y = utils.random_permutation(Y)\n",
        "\n",
        "df = utils.estimate_metrics(Y, 40, icp, -45, 45)\n",
        "view_data.show_estimation_method_plot(df, title=\"ICP\")"
      ],
      "id": "6b297ecf",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Ограниченность ICP\n",
        "\n",
        "Использование упрощенной метрики ведет к тому, что целевая функция преобретает значительное количество локальных минимумов.\n",
        "Кроме того, сопоставление точек облаков через ближайшие — довольно грубое приближение\n",
        "\n",
        "::: {.callout-warning title=\"Использование алгоритма ограничено\"}\n",
        "ICP показывает хорошие результаты только при малых углах поворота\n",
        ":::\n",
        "\n",
        "## Альтернативное решение {.center}\n",
        "### проблемы поиска соответствия {.center}\n",
        "\n",
        "## Поиск соответствий через инвариантные свойства\n",
        "\n",
        "Соответствие можно установить на основе свойств, инвариантных к жёстким преобразованиям. Например:\n",
        "\n",
        "- Углы между нормалями к точкам\n",
        "- Расстояние до центра масс\n",
        "- Радиус кривизны\n",
        "\n",
        "Упорядоченный набор таких свойств записывается как вектор, называемый **дескриптором**\n",
        "\n",
        "## Простейшее решение\n",
        "\n",
        "Каждой точке облака сопоставим точку другого облака, ближайшую по дескрипторам.\n",
        "С появлением соответствия на основе дескрипторов сразу приходит простая и понятная идея - применить желанный алгоритм Кабша. Однако в реальной ситуации можно столкнуться с рядом трудностей\n",
        "\n",
        "## Что делать, если дескрипторы совпадают?\n",
        "\n",
        "Простое решение - увеличить размер дескриптора! Больше инвариантных свойств — меньше вероятность совпадения ✅\t\n",
        "\n",
        "И это решение хоть и кажется забаным, однако некоторые дескрипторы могут насчитывать более 2000 элементов.\n",
        "\n",
        "Однако, это не всегда помогает. Из-за дубликатов может быть много неверных сопоставлений\n",
        "\n",
        "## Что делать, если дескрпитор далёк от всех дескрипторов другого облака?\n",
        "\n",
        "Такая ситуация вполне может возникнуть если представить, что шум достаточное возмущение для того, чтобы испортить локальные метрики.\n",
        "В конце концов, можно найти некоторый ближайший дескриптор, однако, не будет ли столь плохое соответствие портить решение?\n",
        "\n",
        "## Решение. RANSAC\n",
        "\n",
        "Что делать с возникающими несоответствиями? Исключать.\n",
        "Это довольно простой и изящный подход можно реализовать с помощью алгоритма RANSAC.\n",
        "В данном случае несоответствие можно вычислить через применение алгоритма Кабша - все пары точек, расстояние между которыми после оптимального поворота выше некоторого порога - исключаются как ложные соответствия. И цикл повторяется.\n",
        "\n",
        "## Исследование RANSAC\n",
        "\n",
        "### На всем дипазоне углов\n"
      ],
      "id": "8caa1a1c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "from predict_transformation import cloud_generator\n",
        "from predict_transformation import utils\n",
        "from predict_transformation.registrars import ICP_registrar, RANSAC_registrar\n",
        "from predict_transformation import view_data\n",
        "from predict_transformation.arg_parser import estimate_voxel_size\n",
        "\n",
        "def ransac(source_pcd, target_pcd, voxel_size=1):\n",
        "    registrar = RANSAC_registrar(source_pcd, target_pcd, voxel_size=voxel_size)\n",
        "    registrar.register()\n",
        "    return registrar.get_registration_result()\n",
        "\n",
        "np.random.seed(111)\n",
        "NOISE_SCALE = 0.01\n",
        "\n",
        "X = cloud_generator.generate_cloud_matrix(10000, 40)\n",
        "Y = utils.add_noise(X, NOISE_SCALE)\n",
        "Y = utils.random_permutation(Y)\n",
        "\n",
        "\n",
        "df = utils.estimate_metrics(Y, 40, ransac, -180, 180)\n",
        "view_data.show_estimation_method_plot(df, title=\"RANSAC\")"
      ],
      "id": "ad2448ce",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Исследование RANSAC\n",
        "\n",
        "### Для углов от -45 до 45 градусов\n"
      ],
      "id": "3a2af99a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "from predict_transformation import cloud_generator\n",
        "from predict_transformation import utils\n",
        "from predict_transformation.registrars import ICP_registrar, RANSAC_registrar\n",
        "from predict_transformation import view_data\n",
        "from predict_transformation.arg_parser import estimate_voxel_size\n",
        "\n",
        "def ransac(source_pcd, target_pcd, voxel_size=1):\n",
        "    registrar = RANSAC_registrar(source_pcd, target_pcd, voxel_size=voxel_size)\n",
        "    registrar.register()\n",
        "    return registrar.get_registration_result()\n",
        "\n",
        "np.random.seed(111)\n",
        "NOISE_SCALE = 0.01\n",
        "\n",
        "X = cloud_generator.generate_cloud_matrix(10000, 40)\n",
        "Y = utils.add_noise(X, NOISE_SCALE)\n",
        "Y = utils.random_permutation(Y)\n",
        "\n",
        "df = utils.estimate_metrics(Y, 40, ransac, -45, 45)\n",
        "view_data.show_estimation_method_plot(df, title=\"RANSAC\")"
      ],
      "id": "5579c28d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##\n"
      ],
      "id": "46f65f30"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from predict_transformation import cloud_generator\n",
        "from predict_transformation.registrars import ICP_registrar, RANSAC_registrar\n",
        "from predict_transformation.registrars.RANSAC_registrar import preprocess_point_cloud\n",
        "from predict_transformation import utils\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "np.random.seed(111)\n",
        "NOISE_SCALE = 0.01\n",
        "\n",
        "X = cloud_generator.generate_cloud_matrix(10000, 40)\n",
        "Y = utils.add_noise(X, NOISE_SCALE)\n",
        "Y = utils.random_permutation(Y)\n",
        "\n",
        "source_pcd = utils.matrix_to_cloud(X)\n",
        "target_pcd = utils.matrix_to_cloud(Y)\n",
        "\n",
        "source_down, source_fpfh = preprocess_point_cloud(source_pcd, 1)\n",
        "target_down, target_fpfh = preprocess_point_cloud(target_pcd, 1)\n",
        "\n",
        "\n",
        "registrar = RANSAC_registrar(source_down, target_down, voxel_size=1, source_descriptors=source_fpfh, target_descriopors=target_fpfh)\n",
        "registrar.register()\n",
        "result = registrar.get_registration_result()\n",
        "\n",
        "\n",
        "correspondences = np.asarray(result.correspondence_set)\n",
        "\n",
        "import plotly.graph_objects as go\n",
        "\n",
        "# Проверяем, что есть соответствия\n",
        "if len(correspondences) > 0:\n",
        "    source_points = np.asarray(source_down.points)\n",
        "    target_points = np.asarray(target_down.points)\n",
        "    \n",
        "    first_correspondence = correspondences[0]\n",
        "    source_idx, target_idx = first_correspondence\n",
        "\n",
        "    # Получаем координаты точек первого соответствия\n",
        "    source_point = source_points[source_idx]\n",
        "    target_point = target_points[target_idx]\n",
        "\n",
        "    # Создаем график\n",
        "    fig = go.Figure()\n",
        "\n",
        "    # Добавляем облака точек\n",
        "    fig.add_trace(go.Scatter3d(\n",
        "        x=source_points[:, 0],\n",
        "        y=source_points[:, 1],\n",
        "        z=source_points[:, 2],\n",
        "        mode='markers',\n",
        "        marker=dict(size=5, color='blue', opacity=0.6),\n",
        "        name='Source Points'\n",
        "    ))\n",
        "\n",
        "    fig.add_trace(go.Scatter3d(\n",
        "        x=target_points[:, 0],\n",
        "        y=target_points[:, 1],\n",
        "        z=target_points[:, 2],\n",
        "        mode='markers',\n",
        "        marker=dict(size=5, color='green', opacity=0.6),\n",
        "        name='Target Points'\n",
        "    ))\n",
        "\n",
        "    # Добавляем линию между соответствующими точками\n",
        "    fig.add_trace(go.Scatter3d(\n",
        "        x=[source_point[0], target_point[0]],\n",
        "        y=[source_point[1], target_point[1]],\n",
        "        z=[source_point[2], target_point[2]],\n",
        "        mode='lines+markers',\n",
        "        line=dict(color='red', width=4),\n",
        "        marker=dict(size=8, color=['blue', 'green']),\n",
        "        name='First Correspondence'\n",
        "    ))\n",
        "\n",
        "    # Настройка графика\n",
        "    fig.update_layout(\n",
        "        title=\"Первое соответствие между облаками точек\",\n",
        "        scene=dict(\n",
        "            xaxis_title='X',\n",
        "            yaxis_title='Y',\n",
        "            zaxis_title='Z'\n",
        "        )\n",
        "    )\n",
        "\n",
        "    fig.show()\n",
        "else:\n",
        "    print(\"Соответствия не найдены.\")\n"
      ],
      "id": "95a985f3",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/home/sadly/Documents/Documents/education/ДИФФУРЫ/ALT/predict-trans-vychmat/.venv/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}